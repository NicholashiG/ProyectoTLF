"""
View: Handles user interaction and display for lexical analysis and pattern validation
"""

from typing import List, Dict, Any
from ..analysis.lexical_analyzer import Token, TokenType


class TextView:
    """Enhanced view for console input/output with lexical analysis capabilities"""
    
    def get_text_input(self):
        """Get text input from the user"""
        return input("Por favor, ingrese un texto para an√°lisis: ")
    
    def show_message(self, message):
        """Display a message to the user"""
        print(message)
    
    def show_text_info(self, text, length, uppercase, lowercase):
        """Display basic information about the text"""
        print("\n" + "="*60)
        print("INFORMACI√ìN B√ÅSICA DEL TEXTO")
        print("="*60)
        print(f"Texto original: {text}")
        print(f"Longitud: {length} caracteres")
        print(f"May√∫sculas: {uppercase}")
        print(f"Min√∫sculas: {lowercase}")
        print("="*60)
    
    def show_menu(self):
        """Display the main menu options"""
        print("\n" + "="*60)
        print("SISTEMA DE AN√ÅLISIS L√âXICO Y VALIDACI√ìN DE PATRONES")
        print("="*60)
        print("Seleccione una opci√≥n:")
        print("1. An√°lisis completo del texto")
        print("2. Buscar patrones espec√≠ficos")
        print("3. Validar un patr√≥n individual")
        print("4. Ver patrones disponibles")
        print("5. Mostrar ejemplos de patrones")
        print("6. An√°lisis b√°sico (original)")
        print("0. Salir")
        print("="*60)
        
        while True:
            try:
                choice = int(input("Ingrese su opci√≥n (0-6): "))
                if 0 <= choice <= 6:
                    return choice
                else:
                    print("Opci√≥n inv√°lida. Ingrese un n√∫mero entre 0 y 6.")
            except ValueError:
                print("Entrada inv√°lida. Ingrese un n√∫mero.")
    
    def show_enhanced_menu(self):
        """Display the enhanced main menu with new options"""
        print("\n" + "="*70)
        print("üî¨ SISTEMA AVANZADO DE AN√ÅLISIS L√âXICO Y VALIDACI√ìN DE PATRONES")
        print("="*70)
        print("üìã AN√ÅLISIS Y VALIDACI√ìN:")
        print("  1. An√°lisis completo del texto")
        print("  2. Buscar patrones espec√≠ficos")
        print("  3. Validar un patr√≥n individual")
        print("  4. Ver patrones disponibles")
        print("  5. Mostrar ejemplos de patrones")
        print("  6. An√°lisis b√°sico (original)")
        print("\nüìä ESTAD√çSTICAS Y VISUALIZACI√ìN:")
        print("  7. Estad√≠sticas avanzadas")
        print("  8. Generar gr√°ficos y visualizaciones")
        print("  9. Exportar reportes (HTML/JSON/CSV)")
        print("\n‚öôÔ∏è  CONFIGURACI√ìN:")
        print(" 10. Cambiar texto de an√°lisis")
        print("  0. Salir")
        print("="*70)
        
        while True:
            try:
                choice = int(input("Ingrese su opci√≥n (0-10): "))
                if 0 <= choice <= 10:
                    return choice
                else:
                    print("Opci√≥n inv√°lida. Ingrese un n√∫mero entre 0 y 10.")
            except ValueError:
                print("Entrada inv√°lida. Ingrese un n√∫mero.")
    
    def show_lexical_analysis(self, report: str, statistics: Dict[str, Any]):
        """Display complete lexical analysis results"""
        print("\n" + report)
        
        if statistics.get('valid_tokens', 0) > 0:
            print(f"\n‚úÖ Se encontraron {statistics['valid_tokens']} tokens v√°lidos de {statistics['total_tokens']} analizados")
        else:
            print(f"\n‚ùå No se encontraron patrones v√°lidos en el texto analizado")
    
    def show_valid_tokens(self, tokens: List[Token]):
        """Display valid tokens found"""
        if not tokens:
            print("\n‚ùå No se encontraron tokens v√°lidos.")
            return
        
        print(f"\n‚úÖ TOKENS V√ÅLIDOS ENCONTRADOS ({len(tokens)}):")
        print("-" * 60)
        
        # Group tokens by pattern
        grouped_tokens = {}
        for token in tokens:
            if token.pattern_name not in grouped_tokens:
                grouped_tokens[token.pattern_name] = []
            grouped_tokens[token.pattern_name].append(token)
        
        for pattern_name, pattern_tokens in grouped_tokens.items():
            print(f"\nüìã {pattern_name.upper()}:")
            for token in pattern_tokens:
                print(f"   ‚Ä¢ '{token.lexeme}' (L√≠nea {token.line}, Columna {token.column})")
    
    def show_invalid_tokens(self, tokens: List[Token]):
        """Display invalid tokens found"""
        if not tokens:
            print("\n‚úÖ No se encontraron tokens inv√°lidos.")
            return
        
        print(f"\n‚ùå TOKENS INV√ÅLIDOS ENCONTRADOS ({len(tokens)}):")
        print("-" * 60)
        
        for token in tokens[:15]:  # Limit to avoid overwhelming output
            print(f"   ‚Ä¢ '{token.lexeme}' (L√≠nea {token.line}, Columna {token.column})")
        
        if len(tokens) > 15:
            print(f"   ... y {len(tokens) - 15} tokens inv√°lidos m√°s")
    
    def show_pattern_summary(self, summary: Dict[str, int], model):
        """Display summary of patterns found"""
        if not summary:
            print("\n‚ùå No se encontraron patrones v√°lidos.")
            return
        
        print(f"\nüìä RESUMEN DE PATRONES ENCONTRADOS:")
        print("-" * 60)
        
        for pattern_name, count in summary.items():
            description = model.get_pattern_description(pattern_name)
            print(f"‚Ä¢ {pattern_name}: {count} coincidencia(s)")
            print(f"  ‚îî‚îÄ {description}")
            print()
    
    def get_pattern_choice(self, available_patterns: List[str]) -> str:
        """Get user choice for specific pattern analysis"""
        print("\nüìã PATRONES DISPONIBLES:")
        print("-" * 40)
        
        for i, pattern in enumerate(available_patterns, 1):
            print(f"{i}. {pattern}")
        
        while True:
            try:
                choice = int(input(f"\nSeleccione un patr√≥n (1-{len(available_patterns)}): "))
                if 1 <= choice <= len(available_patterns):
                    return available_patterns[choice - 1]
                else:
                    print(f"Opci√≥n inv√°lida. Ingrese un n√∫mero entre 1 y {len(available_patterns)}.")
            except ValueError:
                print("Entrada inv√°lida. Ingrese un n√∫mero.")
    
    def show_pattern_tokens(self, pattern_name: str, tokens: List[Token], description: str):
        """Display tokens for a specific pattern"""
        print(f"\nüîç AN√ÅLISIS DEL PATR√ìN: {pattern_name.upper()}")
        print(f"üìù Descripci√≥n: {description}")
        print("-" * 60)
        
        if not tokens:
            print("‚ùå No se encontraron tokens para este patr√≥n.")
            return
        
        print(f"‚úÖ Se encontraron {len(tokens)} token(s) v√°lido(s):")
        for token in tokens:
            print(f"   ‚Ä¢ '{token.lexeme}' (L√≠nea {token.line}, Columna {token.column})")
    
    def get_validation_input(self):
        """Get input for single pattern validation"""
        text = input("\nIngrese el texto a validar: ")
        return text
    
    def show_validation_result(self, text: str, pattern_name: str, is_valid: bool, description: str):
        """Display single pattern validation result"""
        print(f"\nüîç VALIDACI√ìN DE PATR√ìN: {pattern_name.upper()}")
        print(f"üìù Descripci√≥n: {description}")
        print(f"üìÑ Texto analizado: '{text}'")
        print("-" * 50)
        
        if is_valid:
            print("‚úÖ V√ÅLIDO: El texto cumple con el patr√≥n especificado.")
        else:
            print("‚ùå INV√ÅLIDO: El texto NO cumple con el patr√≥n especificado.")
    
    def show_available_patterns(self, patterns: List[str], model):
        """Display all available patterns with descriptions"""
        print(f"\nüìã PATRONES DISPONIBLES ({len(patterns)}):")
        print("=" * 60)
        
        for pattern in patterns:
            description = model.get_pattern_description(pattern)
            print(f"\nüî∏ {pattern.upper()}")
            print(f"   üìù {description}")
    
    def show_pattern_examples(self, pattern_name: str, examples: List[str], description: str):
        """Display examples for a specific pattern"""
        print(f"\nüìã EJEMPLOS PARA: {pattern_name.upper()}")
        print(f"üìù Descripci√≥n: {description}")
        print("-" * 60)
        
        if not examples:
            print("‚ùå No hay ejemplos disponibles para este patr√≥n.")
            return
        
        print("‚úÖ Ejemplos v√°lidos:")
        for example in examples:
            print(f"   ‚Ä¢ {example}")
    
    def show_statistics(self, stats: Dict[str, Any]):
        """Display detailed statistics"""
        print(f"\nüìä ESTAD√çSTICAS DETALLADAS:")
        print("-" * 40)
        print(f"Total de tokens: {stats.get('total_tokens', 0)}")
        print(f"Tokens v√°lidos: {stats.get('valid_tokens', 0)}")
        print(f"Tokens inv√°lidos: {stats.get('invalid_tokens', 0)}")
        print(f"Signos de puntuaci√≥n: {stats.get('punctuation_tokens', 0)}")
        print(f"Porcentaje de validez: {stats.get('valid_percentage', 0):.1f}%")
        print(f"L√≠neas procesadas: {stats.get('lines_processed', 0)}")
    
    def pause(self):
        """Pause for user to read output"""
        input("\nPresione Enter para continuar...")
    
    def show_goodbye(self):
        """Display goodbye message"""
        print("\n" + "="*60)
        print("¬°Gracias por usar el Sistema de An√°lisis L√©xico!")
        print("Proyecto de Teor√≠a de Lenguajes Formales")
        print("Universidad del Quind√≠o - 2025")
        print("="*60)
